// Package genapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package genapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

const (
	BasicAuthScopes = "BasicAuth.Scopes"
)

// App defines model for App.
type App struct {
	DefaultVariantId int32    `json:"defaultVariantId"`
	Description      string   `json:"description"`
	Hostnames        []string `json:"hostnames"`
	Id               int32    `json:"id"`
	Title            string   `json:"title"`
}

// AppVariant defines model for AppVariant.
type AppVariant struct {
	AppId       int32             `json:"appId"`
	Description string            `json:"description"`
	ExposePort  int32             `json:"exposePort"`
	Id          int32             `json:"id"`
	ImageName   string            `json:"imageName"`
	Matches     []AppVariantMatch `json:"matches"`
	Replicas    int32             `json:"replicas"`
	Title       string            `json:"title"`
}

// AppVariantMatch defines model for AppVariantMatch.
type AppVariantMatch struct {
	Header string `json:"header"`
	Value  string `json:"value"`
}

// AuthRes defines model for AuthRes.
type AuthRes struct {
	Id       int32  `json:"id"`
	Username string `json:"username"`
}

// CreateUserTokenRes defines model for CreateUserTokenRes.
type CreateUserTokenRes struct {
	Description string `json:"description"`
	ExpiredAt   int64  `json:"expiredAt"`
	Id          int32  `json:"id"`
	LastUsedAt  int64  `json:"lastUsedAt"`
	Title       string `json:"title"`
	TokenString string `json:"tokenString"`
}

// LoginReq defines model for LoginReq.
type LoginReq struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// LoginRes defines model for LoginRes.
type LoginRes struct {
	Token string `json:"token"`
}

// UserToken defines model for UserToken.
type UserToken struct {
	Description string `json:"description"`
	ExpiredAt   int64  `json:"expiredAt"`
	Id          int32  `json:"id"`
	LastUsedAt  int64  `json:"lastUsedAt"`
	Title       string `json:"title"`
}

// AppVariantsBatchDeleteParams defines parameters for AppVariantsBatchDelete.
type AppVariantsBatchDeleteParams struct {
	Title string `form:"title" json:"title"`
}

// AppVariantsListParams defines parameters for AppVariantsList.
type AppVariantsListParams struct {
	AppId int32 `form:"appId" json:"appId"`
}

// AppVariantsBatchPutParams defines parameters for AppVariantsBatchPut.
type AppVariantsBatchPutParams struct {
	Title string `form:"title" json:"title"`
}

// AppsCreateJSONRequestBody defines body for AppsCreate for application/json ContentType.
type AppsCreateJSONRequestBody = App

// AppVariantsCreateJSONRequestBody defines body for AppVariantsCreate for application/json ContentType.
type AppVariantsCreateJSONRequestBody = AppVariant

// AppVariantsBatchPutJSONRequestBody defines body for AppVariantsBatchPut for application/json ContentType.
type AppVariantsBatchPutJSONRequestBody = AppVariant

// AppVariantsPutJSONRequestBody defines body for AppVariantsPut for application/json ContentType.
type AppVariantsPutJSONRequestBody = AppVariant

// AppsPutJSONRequestBody defines body for AppsPut for application/json ContentType.
type AppsPutJSONRequestBody = App

// AuthLoginJSONRequestBody defines body for AuthLogin for application/json ContentType.
type AuthLoginJSONRequestBody = LoginReq

// UserTokensCreateJSONRequestBody defines body for UserTokensCreate for application/json ContentType.
type UserTokensCreateJSONRequestBody = UserToken

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/app)
	AppsList(ctx echo.Context) error

	// (POST /api/app)
	AppsCreate(ctx echo.Context) error

	// (DELETE /api/app-variant)
	AppVariantsBatchDelete(ctx echo.Context, params AppVariantsBatchDeleteParams) error

	// (GET /api/app-variant)
	AppVariantsList(ctx echo.Context, params AppVariantsListParams) error

	// (POST /api/app-variant)
	AppVariantsCreate(ctx echo.Context) error

	// (PUT /api/app-variant)
	AppVariantsBatchPut(ctx echo.Context, params AppVariantsBatchPutParams) error

	// (DELETE /api/app-variant/{id})
	AppVariantsDelete(ctx echo.Context, id int32) error

	// (GET /api/app-variant/{id})
	AppVariantsFindById(ctx echo.Context, id int32) error

	// (PUT /api/app-variant/{id})
	AppVariantsPut(ctx echo.Context, id int32) error

	// (DELETE /api/app/{id})
	AppsDelete(ctx echo.Context, id int32) error

	// (GET /api/app/{id})
	AppsFindById(ctx echo.Context, id int32) error

	// (PUT /api/app/{id})
	AppsPut(ctx echo.Context, id int32) error

	// (GET /api/auth)
	AuthAuth(ctx echo.Context) error

	// (POST /api/auth/login)
	AuthLogin(ctx echo.Context) error

	// (GET /api/user-token)
	UserTokensList(ctx echo.Context) error

	// (POST /api/user-token)
	UserTokensCreate(ctx echo.Context) error

	// (DELETE /api/user-token/{id})
	UserTokensDelete(ctx echo.Context, id int32) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AppsList converts echo context to params.
func (w *ServerInterfaceWrapper) AppsList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppsList(ctx)
	return err
}

// AppsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) AppsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppsCreate(ctx)
	return err
}

// AppVariantsBatchDelete converts echo context to params.
func (w *ServerInterfaceWrapper) AppVariantsBatchDelete(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppVariantsBatchDeleteParams
	// ------------- Required query parameter "title" -------------

	err = runtime.BindQueryParameter("form", true, true, "title", ctx.QueryParams(), &params.Title)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter title: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppVariantsBatchDelete(ctx, params)
	return err
}

// AppVariantsList converts echo context to params.
func (w *ServerInterfaceWrapper) AppVariantsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AppVariantsListParams
	// ------------- Required query parameter "appId" -------------

	err = runtime.BindQueryParameter("form", true, true, "appId", ctx.QueryParams(), &params.AppId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppVariantsList(ctx, params)
	return err
}

// AppVariantsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) AppVariantsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppVariantsCreate(ctx)
	return err
}

// AppVariantsBatchPut converts echo context to params.
func (w *ServerInterfaceWrapper) AppVariantsBatchPut(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppVariantsBatchPutParams
	// ------------- Required query parameter "title" -------------

	err = runtime.BindQueryParameter("form", true, true, "title", ctx.QueryParams(), &params.Title)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter title: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppVariantsBatchPut(ctx, params)
	return err
}

// AppVariantsDelete converts echo context to params.
func (w *ServerInterfaceWrapper) AppVariantsDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppVariantsDelete(ctx, id)
	return err
}

// AppVariantsFindById converts echo context to params.
func (w *ServerInterfaceWrapper) AppVariantsFindById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppVariantsFindById(ctx, id)
	return err
}

// AppVariantsPut converts echo context to params.
func (w *ServerInterfaceWrapper) AppVariantsPut(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppVariantsPut(ctx, id)
	return err
}

// AppsDelete converts echo context to params.
func (w *ServerInterfaceWrapper) AppsDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppsDelete(ctx, id)
	return err
}

// AppsFindById converts echo context to params.
func (w *ServerInterfaceWrapper) AppsFindById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppsFindById(ctx, id)
	return err
}

// AppsPut converts echo context to params.
func (w *ServerInterfaceWrapper) AppsPut(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppsPut(ctx, id)
	return err
}

// AuthAuth converts echo context to params.
func (w *ServerInterfaceWrapper) AuthAuth(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthAuth(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthLogin(ctx)
	return err
}

// UserTokensList converts echo context to params.
func (w *ServerInterfaceWrapper) UserTokensList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserTokensList(ctx)
	return err
}

// UserTokensCreate converts echo context to params.
func (w *ServerInterfaceWrapper) UserTokensCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserTokensCreate(ctx)
	return err
}

// UserTokensDelete converts echo context to params.
func (w *ServerInterfaceWrapper) UserTokensDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserTokensDelete(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/app", wrapper.AppsList)
	router.POST(baseURL+"/api/app", wrapper.AppsCreate)
	router.DELETE(baseURL+"/api/app-variant", wrapper.AppVariantsBatchDelete)
	router.GET(baseURL+"/api/app-variant", wrapper.AppVariantsList)
	router.POST(baseURL+"/api/app-variant", wrapper.AppVariantsCreate)
	router.PUT(baseURL+"/api/app-variant", wrapper.AppVariantsBatchPut)
	router.DELETE(baseURL+"/api/app-variant/:id", wrapper.AppVariantsDelete)
	router.GET(baseURL+"/api/app-variant/:id", wrapper.AppVariantsFindById)
	router.PUT(baseURL+"/api/app-variant/:id", wrapper.AppVariantsPut)
	router.DELETE(baseURL+"/api/app/:id", wrapper.AppsDelete)
	router.GET(baseURL+"/api/app/:id", wrapper.AppsFindById)
	router.PUT(baseURL+"/api/app/:id", wrapper.AppsPut)
	router.GET(baseURL+"/api/auth", wrapper.AuthAuth)
	router.POST(baseURL+"/api/auth/login", wrapper.AuthLogin)
	router.GET(baseURL+"/api/user-token", wrapper.UserTokensList)
	router.POST(baseURL+"/api/user-token", wrapper.UserTokensCreate)
	router.DELETE(baseURL+"/api/user-token/:id", wrapper.UserTokensDelete)

}

type AppsListRequestObject struct {
}

type AppsListResponseObject interface {
	VisitAppsListResponse(w http.ResponseWriter) error
}

type AppsList200JSONResponse []App

func (response AppsList200JSONResponse) VisitAppsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AppsCreateRequestObject struct {
	Body *AppsCreateJSONRequestBody
}

type AppsCreateResponseObject interface {
	VisitAppsCreateResponse(w http.ResponseWriter) error
}

type AppsCreate200JSONResponse int32

func (response AppsCreate200JSONResponse) VisitAppsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AppVariantsBatchDeleteRequestObject struct {
	Params AppVariantsBatchDeleteParams
}

type AppVariantsBatchDeleteResponseObject interface {
	VisitAppVariantsBatchDeleteResponse(w http.ResponseWriter) error
}

type AppVariantsBatchDelete200JSONResponse int32

func (response AppVariantsBatchDelete200JSONResponse) VisitAppVariantsBatchDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AppVariantsListRequestObject struct {
	Params AppVariantsListParams
}

type AppVariantsListResponseObject interface {
	VisitAppVariantsListResponse(w http.ResponseWriter) error
}

type AppVariantsList200JSONResponse []AppVariant

func (response AppVariantsList200JSONResponse) VisitAppVariantsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AppVariantsCreateRequestObject struct {
	Body *AppVariantsCreateJSONRequestBody
}

type AppVariantsCreateResponseObject interface {
	VisitAppVariantsCreateResponse(w http.ResponseWriter) error
}

type AppVariantsCreate200JSONResponse int32

func (response AppVariantsCreate200JSONResponse) VisitAppVariantsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AppVariantsBatchPutRequestObject struct {
	Params AppVariantsBatchPutParams
	Body   *AppVariantsBatchPutJSONRequestBody
}

type AppVariantsBatchPutResponseObject interface {
	VisitAppVariantsBatchPutResponse(w http.ResponseWriter) error
}

type AppVariantsBatchPut200JSONResponse int32

func (response AppVariantsBatchPut200JSONResponse) VisitAppVariantsBatchPutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AppVariantsDeleteRequestObject struct {
	Id int32 `json:"id"`
}

type AppVariantsDeleteResponseObject interface {
	VisitAppVariantsDeleteResponse(w http.ResponseWriter) error
}

type AppVariantsDelete200JSONResponse int32

func (response AppVariantsDelete200JSONResponse) VisitAppVariantsDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AppVariantsFindByIdRequestObject struct {
	Id int32 `json:"id"`
}

type AppVariantsFindByIdResponseObject interface {
	VisitAppVariantsFindByIdResponse(w http.ResponseWriter) error
}

type AppVariantsFindById200JSONResponse AppVariant

func (response AppVariantsFindById200JSONResponse) VisitAppVariantsFindByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AppVariantsPutRequestObject struct {
	Id   int32 `json:"id"`
	Body *AppVariantsPutJSONRequestBody
}

type AppVariantsPutResponseObject interface {
	VisitAppVariantsPutResponse(w http.ResponseWriter) error
}

type AppVariantsPut200JSONResponse int32

func (response AppVariantsPut200JSONResponse) VisitAppVariantsPutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AppsDeleteRequestObject struct {
	Id int32 `json:"id"`
}

type AppsDeleteResponseObject interface {
	VisitAppsDeleteResponse(w http.ResponseWriter) error
}

type AppsDelete200JSONResponse int32

func (response AppsDelete200JSONResponse) VisitAppsDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AppsFindByIdRequestObject struct {
	Id int32 `json:"id"`
}

type AppsFindByIdResponseObject interface {
	VisitAppsFindByIdResponse(w http.ResponseWriter) error
}

type AppsFindById200JSONResponse App

func (response AppsFindById200JSONResponse) VisitAppsFindByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AppsPutRequestObject struct {
	Id   int32 `json:"id"`
	Body *AppsPutJSONRequestBody
}

type AppsPutResponseObject interface {
	VisitAppsPutResponse(w http.ResponseWriter) error
}

type AppsPut200JSONResponse int32

func (response AppsPut200JSONResponse) VisitAppsPutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AuthAuthRequestObject struct {
}

type AuthAuthResponseObject interface {
	VisitAuthAuthResponse(w http.ResponseWriter) error
}

type AuthAuth200JSONResponse AuthRes

func (response AuthAuth200JSONResponse) VisitAuthAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AuthLoginRequestObject struct {
	Body *AuthLoginJSONRequestBody
}

type AuthLoginResponseObject interface {
	VisitAuthLoginResponse(w http.ResponseWriter) error
}

type AuthLogin200JSONResponse LoginRes

func (response AuthLogin200JSONResponse) VisitAuthLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserTokensListRequestObject struct {
}

type UserTokensListResponseObject interface {
	VisitUserTokensListResponse(w http.ResponseWriter) error
}

type UserTokensList200JSONResponse []UserToken

func (response UserTokensList200JSONResponse) VisitUserTokensListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserTokensCreateRequestObject struct {
	Body *UserTokensCreateJSONRequestBody
}

type UserTokensCreateResponseObject interface {
	VisitUserTokensCreateResponse(w http.ResponseWriter) error
}

type UserTokensCreate200JSONResponse CreateUserTokenRes

func (response UserTokensCreate200JSONResponse) VisitUserTokensCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserTokensDeleteRequestObject struct {
	Id int32 `json:"id"`
}

type UserTokensDeleteResponseObject interface {
	VisitUserTokensDeleteResponse(w http.ResponseWriter) error
}

type UserTokensDelete200JSONResponse int32

func (response UserTokensDelete200JSONResponse) VisitUserTokensDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /api/app)
	AppsList(ctx context.Context, request AppsListRequestObject) (AppsListResponseObject, error)

	// (POST /api/app)
	AppsCreate(ctx context.Context, request AppsCreateRequestObject) (AppsCreateResponseObject, error)

	// (DELETE /api/app-variant)
	AppVariantsBatchDelete(ctx context.Context, request AppVariantsBatchDeleteRequestObject) (AppVariantsBatchDeleteResponseObject, error)

	// (GET /api/app-variant)
	AppVariantsList(ctx context.Context, request AppVariantsListRequestObject) (AppVariantsListResponseObject, error)

	// (POST /api/app-variant)
	AppVariantsCreate(ctx context.Context, request AppVariantsCreateRequestObject) (AppVariantsCreateResponseObject, error)

	// (PUT /api/app-variant)
	AppVariantsBatchPut(ctx context.Context, request AppVariantsBatchPutRequestObject) (AppVariantsBatchPutResponseObject, error)

	// (DELETE /api/app-variant/{id})
	AppVariantsDelete(ctx context.Context, request AppVariantsDeleteRequestObject) (AppVariantsDeleteResponseObject, error)

	// (GET /api/app-variant/{id})
	AppVariantsFindById(ctx context.Context, request AppVariantsFindByIdRequestObject) (AppVariantsFindByIdResponseObject, error)

	// (PUT /api/app-variant/{id})
	AppVariantsPut(ctx context.Context, request AppVariantsPutRequestObject) (AppVariantsPutResponseObject, error)

	// (DELETE /api/app/{id})
	AppsDelete(ctx context.Context, request AppsDeleteRequestObject) (AppsDeleteResponseObject, error)

	// (GET /api/app/{id})
	AppsFindById(ctx context.Context, request AppsFindByIdRequestObject) (AppsFindByIdResponseObject, error)

	// (PUT /api/app/{id})
	AppsPut(ctx context.Context, request AppsPutRequestObject) (AppsPutResponseObject, error)

	// (GET /api/auth)
	AuthAuth(ctx context.Context, request AuthAuthRequestObject) (AuthAuthResponseObject, error)

	// (POST /api/auth/login)
	AuthLogin(ctx context.Context, request AuthLoginRequestObject) (AuthLoginResponseObject, error)

	// (GET /api/user-token)
	UserTokensList(ctx context.Context, request UserTokensListRequestObject) (UserTokensListResponseObject, error)

	// (POST /api/user-token)
	UserTokensCreate(ctx context.Context, request UserTokensCreateRequestObject) (UserTokensCreateResponseObject, error)

	// (DELETE /api/user-token/{id})
	UserTokensDelete(ctx context.Context, request UserTokensDeleteRequestObject) (UserTokensDeleteResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// AppsList operation middleware
func (sh *strictHandler) AppsList(ctx echo.Context) error {
	var request AppsListRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AppsList(ctx.Request().Context(), request.(AppsListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AppsList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AppsListResponseObject); ok {
		return validResponse.VisitAppsListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AppsCreate operation middleware
func (sh *strictHandler) AppsCreate(ctx echo.Context) error {
	var request AppsCreateRequestObject

	var body AppsCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AppsCreate(ctx.Request().Context(), request.(AppsCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AppsCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AppsCreateResponseObject); ok {
		return validResponse.VisitAppsCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AppVariantsBatchDelete operation middleware
func (sh *strictHandler) AppVariantsBatchDelete(ctx echo.Context, params AppVariantsBatchDeleteParams) error {
	var request AppVariantsBatchDeleteRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AppVariantsBatchDelete(ctx.Request().Context(), request.(AppVariantsBatchDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AppVariantsBatchDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AppVariantsBatchDeleteResponseObject); ok {
		return validResponse.VisitAppVariantsBatchDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AppVariantsList operation middleware
func (sh *strictHandler) AppVariantsList(ctx echo.Context, params AppVariantsListParams) error {
	var request AppVariantsListRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AppVariantsList(ctx.Request().Context(), request.(AppVariantsListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AppVariantsList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AppVariantsListResponseObject); ok {
		return validResponse.VisitAppVariantsListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AppVariantsCreate operation middleware
func (sh *strictHandler) AppVariantsCreate(ctx echo.Context) error {
	var request AppVariantsCreateRequestObject

	var body AppVariantsCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AppVariantsCreate(ctx.Request().Context(), request.(AppVariantsCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AppVariantsCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AppVariantsCreateResponseObject); ok {
		return validResponse.VisitAppVariantsCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AppVariantsBatchPut operation middleware
func (sh *strictHandler) AppVariantsBatchPut(ctx echo.Context, params AppVariantsBatchPutParams) error {
	var request AppVariantsBatchPutRequestObject

	request.Params = params

	var body AppVariantsBatchPutJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AppVariantsBatchPut(ctx.Request().Context(), request.(AppVariantsBatchPutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AppVariantsBatchPut")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AppVariantsBatchPutResponseObject); ok {
		return validResponse.VisitAppVariantsBatchPutResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AppVariantsDelete operation middleware
func (sh *strictHandler) AppVariantsDelete(ctx echo.Context, id int32) error {
	var request AppVariantsDeleteRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AppVariantsDelete(ctx.Request().Context(), request.(AppVariantsDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AppVariantsDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AppVariantsDeleteResponseObject); ok {
		return validResponse.VisitAppVariantsDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AppVariantsFindById operation middleware
func (sh *strictHandler) AppVariantsFindById(ctx echo.Context, id int32) error {
	var request AppVariantsFindByIdRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AppVariantsFindById(ctx.Request().Context(), request.(AppVariantsFindByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AppVariantsFindById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AppVariantsFindByIdResponseObject); ok {
		return validResponse.VisitAppVariantsFindByIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AppVariantsPut operation middleware
func (sh *strictHandler) AppVariantsPut(ctx echo.Context, id int32) error {
	var request AppVariantsPutRequestObject

	request.Id = id

	var body AppVariantsPutJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AppVariantsPut(ctx.Request().Context(), request.(AppVariantsPutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AppVariantsPut")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AppVariantsPutResponseObject); ok {
		return validResponse.VisitAppVariantsPutResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AppsDelete operation middleware
func (sh *strictHandler) AppsDelete(ctx echo.Context, id int32) error {
	var request AppsDeleteRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AppsDelete(ctx.Request().Context(), request.(AppsDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AppsDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AppsDeleteResponseObject); ok {
		return validResponse.VisitAppsDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AppsFindById operation middleware
func (sh *strictHandler) AppsFindById(ctx echo.Context, id int32) error {
	var request AppsFindByIdRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AppsFindById(ctx.Request().Context(), request.(AppsFindByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AppsFindById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AppsFindByIdResponseObject); ok {
		return validResponse.VisitAppsFindByIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AppsPut operation middleware
func (sh *strictHandler) AppsPut(ctx echo.Context, id int32) error {
	var request AppsPutRequestObject

	request.Id = id

	var body AppsPutJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AppsPut(ctx.Request().Context(), request.(AppsPutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AppsPut")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AppsPutResponseObject); ok {
		return validResponse.VisitAppsPutResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AuthAuth operation middleware
func (sh *strictHandler) AuthAuth(ctx echo.Context) error {
	var request AuthAuthRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthAuth(ctx.Request().Context(), request.(AuthAuthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthAuth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AuthAuthResponseObject); ok {
		return validResponse.VisitAuthAuthResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AuthLogin operation middleware
func (sh *strictHandler) AuthLogin(ctx echo.Context) error {
	var request AuthLoginRequestObject

	var body AuthLoginJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthLogin(ctx.Request().Context(), request.(AuthLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AuthLoginResponseObject); ok {
		return validResponse.VisitAuthLoginResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UserTokensList operation middleware
func (sh *strictHandler) UserTokensList(ctx echo.Context) error {
	var request UserTokensListRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserTokensList(ctx.Request().Context(), request.(UserTokensListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserTokensList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserTokensListResponseObject); ok {
		return validResponse.VisitUserTokensListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UserTokensCreate operation middleware
func (sh *strictHandler) UserTokensCreate(ctx echo.Context) error {
	var request UserTokensCreateRequestObject

	var body UserTokensCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserTokensCreate(ctx.Request().Context(), request.(UserTokensCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserTokensCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserTokensCreateResponseObject); ok {
		return validResponse.VisitUserTokensCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UserTokensDelete operation middleware
func (sh *strictHandler) UserTokensDelete(ctx echo.Context, id int32) error {
	var request UserTokensDeleteRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserTokensDelete(ctx.Request().Context(), request.(UserTokensDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserTokensDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserTokensDeleteResponseObject); ok {
		return validResponse.VisitUserTokensDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZTW/jNhD9KwHbQwtoI2O36ME3e4sCBbbFYpP0EvjASGOLqUQy5CitYei/FyRlybIo",
	"W44tF3F9ikVR8/Hm8Q3JrEgkMik4cNRkvCI6SiCj9udESvNHKiFBIQM7GMOc5in+SRWjHH+LzdhcqIwi",
	"GRPG8dNHEhBcSnCPsABFioDEoCPFJDLBzRflBI2K8YV5nwiNnGbOB0PItHdaOUCVokvzzPr6R4YpeEwW",
	"AVHwkjMFMRk/Gnvruc2YNyMM2iDMKp/i6RkiNC4nUpYT2ihSKU8GHfwjhYavQmFPg71BYxldwB80A6/f",
	"jGKUbBXsewVzMibfhTWpwpJRYY3H7+ZLXzkVyJRFjn1nKWqd4YbzBqR1nkFZtd21drm1Cp4AjUF5cXyl",
	"ad4ji9LCer43ihyTb85f03vviucaFPcX3AdqNd0XzWcFFOFBg7oXfwH3BtaD28bhpEXtn386jtop1fig",
	"D7DcxbWAoMnuzj0ew8WNkDYTbzrwAf1FLBj/Bi9teCXV+m+hYm/c/WtdzQxqizsC8dTZprDfkZvmM13R",
	"6BI5dDRH2ogVAdEQ5Yrh8s7or4NqSjWLjEpUnd5882RG64ATREkKY4HxubDhurjJD/bHj0aDQGmLNxnd",
	"jm5HJjkhgVPJyJh8skOGK5hYtyGVLKRuN7EAi5YpIDVJmTZo5FN/YRqtCmspuHbxfhyNzJ9IcATXRqm0",
	"Im2+DJ+1q7hrMIf0oXbvKbYbLblP4MZUBTTeJFTf6DyKAGKIby26SBfaFGsi5WfBUYk0BUVmRUCk0B0p",
	"OkUkrtqgcSri5UH57U2rSSVUORRHQrp3HRyM3JqXZPzYYOTjrJh141oEFY0+vNbbqhhSQPDCXTZkPTUd",
	"+Rc3z5BS0QwQlLb+mQn4JQe1JAFxalgtvSaQwQYo2+t39n5BLlHa4nDXKl1jWi7WHmC6PdMuMPcnPzuT",
	"LKy36ydVBz/AnSKxRnhorahyvSjJ6AA7x/0K8TXHQeXhWsWjqujR/3DF4qJnE9ip/2ajUteX/ddy9e66",
	"wa+Mx9Ollfl3AO8hS+rEor9Hh7olaAgIr4J0KkHqI0RXBXrDpr9bei5Lc057/uxQmUuQl//FCbe8n/FT",
	"P8fEGhuSkOU18mCJ55h0Zh6mYsHcLZ//iJRjYu8ZBzoaVZepAzCth199jBR04ZprUB+qK1gvr6r71fPd",
	"w9VXuqc7b1c2ex2366QHPW1vJHpeTnn+AzPUmvYD3ybg3q1SXZPrhunNsNcrYrWGaEsciqB+0+hDzRft",
	"je/Ge5/zYlb8GwAA//+nPNuZUiAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
