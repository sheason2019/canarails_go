// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q           = new(Query)
	App         *app
	AppVariant  *appVariant
	PersistData *persistData
	User        *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	App = &Q.App
	AppVariant = &Q.AppVariant
	PersistData = &Q.PersistData
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:          db,
		App:         newApp(db, opts...),
		AppVariant:  newAppVariant(db, opts...),
		PersistData: newPersistData(db, opts...),
		User:        newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	App         app
	AppVariant  appVariant
	PersistData persistData
	User        user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:          db,
		App:         q.App.clone(db),
		AppVariant:  q.AppVariant.clone(db),
		PersistData: q.PersistData.clone(db),
		User:        q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:          db,
		App:         q.App.replaceDB(db),
		AppVariant:  q.AppVariant.replaceDB(db),
		PersistData: q.PersistData.replaceDB(db),
		User:        q.User.replaceDB(db),
	}
}

type queryCtx struct {
	App         IAppDo
	AppVariant  IAppVariantDo
	PersistData IPersistDataDo
	User        IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		App:         q.App.WithContext(ctx),
		AppVariant:  q.AppVariant.WithContext(ctx),
		PersistData: q.PersistData.WithContext(ctx),
		User:        q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
