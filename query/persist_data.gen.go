// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"canarails.dev/database/models"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPersistData(db *gorm.DB, opts ...gen.DOOption) persistData {
	_persistData := persistData{}

	_persistData.persistDataDo.UseDB(db, opts...)
	_persistData.persistDataDo.UseModel(&models.PersistData{})

	tableName := _persistData.persistDataDo.TableName()
	_persistData.ALL = field.NewAsterisk(tableName)
	_persistData.ID = field.NewUint(tableName, "id")
	_persistData.CreatedAt = field.NewTime(tableName, "created_at")
	_persistData.UpdatedAt = field.NewTime(tableName, "updated_at")
	_persistData.DeletedAt = field.NewField(tableName, "deleted_at")
	_persistData.Key = field.NewString(tableName, "key")
	_persistData.Value = field.NewString(tableName, "value")

	_persistData.fillFieldMap()

	return _persistData
}

type persistData struct {
	persistDataDo persistDataDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Key       field.String
	Value     field.String

	fieldMap map[string]field.Expr
}

func (p persistData) Table(newTableName string) *persistData {
	p.persistDataDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p persistData) As(alias string) *persistData {
	p.persistDataDo.DO = *(p.persistDataDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *persistData) updateTableName(table string) *persistData {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.Key = field.NewString(table, "key")
	p.Value = field.NewString(table, "value")

	p.fillFieldMap()

	return p
}

func (p *persistData) WithContext(ctx context.Context) IPersistDataDo {
	return p.persistDataDo.WithContext(ctx)
}

func (p persistData) TableName() string { return p.persistDataDo.TableName() }

func (p persistData) Alias() string { return p.persistDataDo.Alias() }

func (p persistData) Columns(cols ...field.Expr) gen.Columns { return p.persistDataDo.Columns(cols...) }

func (p *persistData) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *persistData) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 6)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["key"] = p.Key
	p.fieldMap["value"] = p.Value
}

func (p persistData) clone(db *gorm.DB) persistData {
	p.persistDataDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p persistData) replaceDB(db *gorm.DB) persistData {
	p.persistDataDo.ReplaceDB(db)
	return p
}

type persistDataDo struct{ gen.DO }

type IPersistDataDo interface {
	gen.SubQuery
	Debug() IPersistDataDo
	WithContext(ctx context.Context) IPersistDataDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPersistDataDo
	WriteDB() IPersistDataDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPersistDataDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPersistDataDo
	Not(conds ...gen.Condition) IPersistDataDo
	Or(conds ...gen.Condition) IPersistDataDo
	Select(conds ...field.Expr) IPersistDataDo
	Where(conds ...gen.Condition) IPersistDataDo
	Order(conds ...field.Expr) IPersistDataDo
	Distinct(cols ...field.Expr) IPersistDataDo
	Omit(cols ...field.Expr) IPersistDataDo
	Join(table schema.Tabler, on ...field.Expr) IPersistDataDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPersistDataDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPersistDataDo
	Group(cols ...field.Expr) IPersistDataDo
	Having(conds ...gen.Condition) IPersistDataDo
	Limit(limit int) IPersistDataDo
	Offset(offset int) IPersistDataDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPersistDataDo
	Unscoped() IPersistDataDo
	Create(values ...*models.PersistData) error
	CreateInBatches(values []*models.PersistData, batchSize int) error
	Save(values ...*models.PersistData) error
	First() (*models.PersistData, error)
	Take() (*models.PersistData, error)
	Last() (*models.PersistData, error)
	Find() ([]*models.PersistData, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.PersistData, err error)
	FindInBatches(result *[]*models.PersistData, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.PersistData) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPersistDataDo
	Assign(attrs ...field.AssignExpr) IPersistDataDo
	Joins(fields ...field.RelationField) IPersistDataDo
	Preload(fields ...field.RelationField) IPersistDataDo
	FirstOrInit() (*models.PersistData, error)
	FirstOrCreate() (*models.PersistData, error)
	FindByPage(offset int, limit int) (result []*models.PersistData, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPersistDataDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p persistDataDo) Debug() IPersistDataDo {
	return p.withDO(p.DO.Debug())
}

func (p persistDataDo) WithContext(ctx context.Context) IPersistDataDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p persistDataDo) ReadDB() IPersistDataDo {
	return p.Clauses(dbresolver.Read)
}

func (p persistDataDo) WriteDB() IPersistDataDo {
	return p.Clauses(dbresolver.Write)
}

func (p persistDataDo) Session(config *gorm.Session) IPersistDataDo {
	return p.withDO(p.DO.Session(config))
}

func (p persistDataDo) Clauses(conds ...clause.Expression) IPersistDataDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p persistDataDo) Returning(value interface{}, columns ...string) IPersistDataDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p persistDataDo) Not(conds ...gen.Condition) IPersistDataDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p persistDataDo) Or(conds ...gen.Condition) IPersistDataDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p persistDataDo) Select(conds ...field.Expr) IPersistDataDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p persistDataDo) Where(conds ...gen.Condition) IPersistDataDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p persistDataDo) Order(conds ...field.Expr) IPersistDataDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p persistDataDo) Distinct(cols ...field.Expr) IPersistDataDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p persistDataDo) Omit(cols ...field.Expr) IPersistDataDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p persistDataDo) Join(table schema.Tabler, on ...field.Expr) IPersistDataDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p persistDataDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPersistDataDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p persistDataDo) RightJoin(table schema.Tabler, on ...field.Expr) IPersistDataDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p persistDataDo) Group(cols ...field.Expr) IPersistDataDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p persistDataDo) Having(conds ...gen.Condition) IPersistDataDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p persistDataDo) Limit(limit int) IPersistDataDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p persistDataDo) Offset(offset int) IPersistDataDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p persistDataDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPersistDataDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p persistDataDo) Unscoped() IPersistDataDo {
	return p.withDO(p.DO.Unscoped())
}

func (p persistDataDo) Create(values ...*models.PersistData) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p persistDataDo) CreateInBatches(values []*models.PersistData, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p persistDataDo) Save(values ...*models.PersistData) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p persistDataDo) First() (*models.PersistData, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.PersistData), nil
	}
}

func (p persistDataDo) Take() (*models.PersistData, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.PersistData), nil
	}
}

func (p persistDataDo) Last() (*models.PersistData, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.PersistData), nil
	}
}

func (p persistDataDo) Find() ([]*models.PersistData, error) {
	result, err := p.DO.Find()
	return result.([]*models.PersistData), err
}

func (p persistDataDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.PersistData, err error) {
	buf := make([]*models.PersistData, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p persistDataDo) FindInBatches(result *[]*models.PersistData, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p persistDataDo) Attrs(attrs ...field.AssignExpr) IPersistDataDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p persistDataDo) Assign(attrs ...field.AssignExpr) IPersistDataDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p persistDataDo) Joins(fields ...field.RelationField) IPersistDataDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p persistDataDo) Preload(fields ...field.RelationField) IPersistDataDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p persistDataDo) FirstOrInit() (*models.PersistData, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.PersistData), nil
	}
}

func (p persistDataDo) FirstOrCreate() (*models.PersistData, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.PersistData), nil
	}
}

func (p persistDataDo) FindByPage(offset int, limit int) (result []*models.PersistData, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p persistDataDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p persistDataDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p persistDataDo) Delete(models ...*models.PersistData) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *persistDataDo) withDO(do gen.Dao) *persistDataDo {
	p.DO = *do.(*gen.DO)
	return p
}
