// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"canarails.dev/database/models"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newUserToken(db *gorm.DB, opts ...gen.DOOption) userToken {
	_userToken := userToken{}

	_userToken.userTokenDo.UseDB(db, opts...)
	_userToken.userTokenDo.UseModel(&models.UserToken{})

	tableName := _userToken.userTokenDo.TableName()
	_userToken.ALL = field.NewAsterisk(tableName)
	_userToken.ID = field.NewUint(tableName, "id")
	_userToken.CreatedAt = field.NewTime(tableName, "created_at")
	_userToken.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userToken.DeletedAt = field.NewField(tableName, "deleted_at")
	_userToken.Title = field.NewString(tableName, "title")
	_userToken.Description = field.NewString(tableName, "description")
	_userToken.LastUsedAt = field.NewTime(tableName, "last_used_at")
	_userToken.ExpiredAt = field.NewTime(tableName, "expired_at")
	_userToken.UserID = field.NewUint(tableName, "user_id")
	_userToken.User = userTokenBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "models.User"),
		UserTokens: struct {
			field.RelationField
			User struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("User.UserTokens", "models.UserToken"),
			User: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("User.UserTokens.User", "models.User"),
			},
		},
	}

	_userToken.fillFieldMap()

	return _userToken
}

type userToken struct {
	userTokenDo userTokenDo

	ALL         field.Asterisk
	ID          field.Uint
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	Title       field.String
	Description field.String
	LastUsedAt  field.Time
	ExpiredAt   field.Time
	UserID      field.Uint
	User        userTokenBelongsToUser

	fieldMap map[string]field.Expr
}

func (u userToken) Table(newTableName string) *userToken {
	u.userTokenDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userToken) As(alias string) *userToken {
	u.userTokenDo.DO = *(u.userTokenDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userToken) updateTableName(table string) *userToken {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewUint(table, "id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")
	u.Title = field.NewString(table, "title")
	u.Description = field.NewString(table, "description")
	u.LastUsedAt = field.NewTime(table, "last_used_at")
	u.ExpiredAt = field.NewTime(table, "expired_at")
	u.UserID = field.NewUint(table, "user_id")

	u.fillFieldMap()

	return u
}

func (u *userToken) WithContext(ctx context.Context) IUserTokenDo {
	return u.userTokenDo.WithContext(ctx)
}

func (u userToken) TableName() string { return u.userTokenDo.TableName() }

func (u userToken) Alias() string { return u.userTokenDo.Alias() }

func (u userToken) Columns(cols ...field.Expr) gen.Columns { return u.userTokenDo.Columns(cols...) }

func (u *userToken) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userToken) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 10)
	u.fieldMap["id"] = u.ID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
	u.fieldMap["title"] = u.Title
	u.fieldMap["description"] = u.Description
	u.fieldMap["last_used_at"] = u.LastUsedAt
	u.fieldMap["expired_at"] = u.ExpiredAt
	u.fieldMap["user_id"] = u.UserID

}

func (u userToken) clone(db *gorm.DB) userToken {
	u.userTokenDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userToken) replaceDB(db *gorm.DB) userToken {
	u.userTokenDo.ReplaceDB(db)
	return u
}

type userTokenBelongsToUser struct {
	db *gorm.DB

	field.RelationField

	UserTokens struct {
		field.RelationField
		User struct {
			field.RelationField
		}
	}
}

func (a userTokenBelongsToUser) Where(conds ...field.Expr) *userTokenBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userTokenBelongsToUser) WithContext(ctx context.Context) *userTokenBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userTokenBelongsToUser) Session(session *gorm.Session) *userTokenBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a userTokenBelongsToUser) Model(m *models.UserToken) *userTokenBelongsToUserTx {
	return &userTokenBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

type userTokenBelongsToUserTx struct{ tx *gorm.Association }

func (a userTokenBelongsToUserTx) Find() (result *models.User, err error) {
	return result, a.tx.Find(&result)
}

func (a userTokenBelongsToUserTx) Append(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userTokenBelongsToUserTx) Replace(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userTokenBelongsToUserTx) Delete(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userTokenBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a userTokenBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

type userTokenDo struct{ gen.DO }

type IUserTokenDo interface {
	gen.SubQuery
	Debug() IUserTokenDo
	WithContext(ctx context.Context) IUserTokenDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserTokenDo
	WriteDB() IUserTokenDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserTokenDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserTokenDo
	Not(conds ...gen.Condition) IUserTokenDo
	Or(conds ...gen.Condition) IUserTokenDo
	Select(conds ...field.Expr) IUserTokenDo
	Where(conds ...gen.Condition) IUserTokenDo
	Order(conds ...field.Expr) IUserTokenDo
	Distinct(cols ...field.Expr) IUserTokenDo
	Omit(cols ...field.Expr) IUserTokenDo
	Join(table schema.Tabler, on ...field.Expr) IUserTokenDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserTokenDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserTokenDo
	Group(cols ...field.Expr) IUserTokenDo
	Having(conds ...gen.Condition) IUserTokenDo
	Limit(limit int) IUserTokenDo
	Offset(offset int) IUserTokenDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserTokenDo
	Unscoped() IUserTokenDo
	Create(values ...*models.UserToken) error
	CreateInBatches(values []*models.UserToken, batchSize int) error
	Save(values ...*models.UserToken) error
	First() (*models.UserToken, error)
	Take() (*models.UserToken, error)
	Last() (*models.UserToken, error)
	Find() ([]*models.UserToken, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.UserToken, err error)
	FindInBatches(result *[]*models.UserToken, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.UserToken) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserTokenDo
	Assign(attrs ...field.AssignExpr) IUserTokenDo
	Joins(fields ...field.RelationField) IUserTokenDo
	Preload(fields ...field.RelationField) IUserTokenDo
	FirstOrInit() (*models.UserToken, error)
	FirstOrCreate() (*models.UserToken, error)
	FindByPage(offset int, limit int) (result []*models.UserToken, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserTokenDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userTokenDo) Debug() IUserTokenDo {
	return u.withDO(u.DO.Debug())
}

func (u userTokenDo) WithContext(ctx context.Context) IUserTokenDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userTokenDo) ReadDB() IUserTokenDo {
	return u.Clauses(dbresolver.Read)
}

func (u userTokenDo) WriteDB() IUserTokenDo {
	return u.Clauses(dbresolver.Write)
}

func (u userTokenDo) Session(config *gorm.Session) IUserTokenDo {
	return u.withDO(u.DO.Session(config))
}

func (u userTokenDo) Clauses(conds ...clause.Expression) IUserTokenDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userTokenDo) Returning(value interface{}, columns ...string) IUserTokenDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userTokenDo) Not(conds ...gen.Condition) IUserTokenDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userTokenDo) Or(conds ...gen.Condition) IUserTokenDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userTokenDo) Select(conds ...field.Expr) IUserTokenDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userTokenDo) Where(conds ...gen.Condition) IUserTokenDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userTokenDo) Order(conds ...field.Expr) IUserTokenDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userTokenDo) Distinct(cols ...field.Expr) IUserTokenDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userTokenDo) Omit(cols ...field.Expr) IUserTokenDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userTokenDo) Join(table schema.Tabler, on ...field.Expr) IUserTokenDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userTokenDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserTokenDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userTokenDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserTokenDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userTokenDo) Group(cols ...field.Expr) IUserTokenDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userTokenDo) Having(conds ...gen.Condition) IUserTokenDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userTokenDo) Limit(limit int) IUserTokenDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userTokenDo) Offset(offset int) IUserTokenDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userTokenDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserTokenDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userTokenDo) Unscoped() IUserTokenDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userTokenDo) Create(values ...*models.UserToken) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userTokenDo) CreateInBatches(values []*models.UserToken, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userTokenDo) Save(values ...*models.UserToken) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userTokenDo) First() (*models.UserToken, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserToken), nil
	}
}

func (u userTokenDo) Take() (*models.UserToken, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserToken), nil
	}
}

func (u userTokenDo) Last() (*models.UserToken, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserToken), nil
	}
}

func (u userTokenDo) Find() ([]*models.UserToken, error) {
	result, err := u.DO.Find()
	return result.([]*models.UserToken), err
}

func (u userTokenDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.UserToken, err error) {
	buf := make([]*models.UserToken, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userTokenDo) FindInBatches(result *[]*models.UserToken, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userTokenDo) Attrs(attrs ...field.AssignExpr) IUserTokenDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userTokenDo) Assign(attrs ...field.AssignExpr) IUserTokenDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userTokenDo) Joins(fields ...field.RelationField) IUserTokenDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userTokenDo) Preload(fields ...field.RelationField) IUserTokenDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userTokenDo) FirstOrInit() (*models.UserToken, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserToken), nil
	}
}

func (u userTokenDo) FirstOrCreate() (*models.UserToken, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserToken), nil
	}
}

func (u userTokenDo) FindByPage(offset int, limit int) (result []*models.UserToken, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userTokenDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userTokenDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userTokenDo) Delete(models ...*models.UserToken) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userTokenDo) withDO(do gen.Dao) *userTokenDo {
	u.DO = *do.(*gen.DO)
	return u
}
